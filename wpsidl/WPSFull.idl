module WorldPerceptionModel
{

    const long  MAX_POINTS_IN_REGION_OF_INTEREST = 10;

	struct WPS_TDPoint 
	{
		double x;
		double y;
		double z;
	}; //@top-level false

    typedef sequence<WPS_TDPoint, MAX_POINTS_IN_REGION_OF_INTEREST> RegionOfInterest_type;

    module WPS_BuildModel
    {
 
        struct WPS_BuildModelParameters
        {
            string<255> PathToFolder;
            RegionOfInterest_type region_of_interest;
        };//@top-level false

        enum WPS_BuildModelOperation_type
		{
			BuildModelDense,
			AbortBuildModel
		};

        struct WPS_BuildModelData
		{
			WPS_BuildModelOperation_type request;
			WPS_BuildModelParameters parameters;
		};//@top-level false

		struct WPS_BuildModelMessage
		{
			long RequestId;//@key
			WPS_BuildModelData Data;
		};

		enum WPS_BuildModelStatusEnum
		{
			Idle,  //Default and value at start
			InProgess, 
            Aborted,
            Completed,
			Failure
		};

		struct WPS_BuildModelReportMessage
		{
			long RequestId;//@key
            WPS_BuildModelStatusEnum BuildModelStatus;
            long ModelQuality;
		};
        
    }; //End BuildModel

	module WPS_DroneLocalizationReporting {

		struct WPS_DroneLocalizationParameters
        {
            string<255> PathToFolder;
			string<255> LiveVideoURL;
        };//@top-level false

        enum WPS_DroneLocalizationOperation_type
		{
			ReportDroneLocalization,
			AbortDroneLocalization
		};

        struct WPS_DroneLocalizationData
		{
			WPS_DroneLocalizationOperation_type request;
			WPS_DroneLocalizationParameters parameters;
		};//@top-level false

		struct WPS_DroneLocalizationMessage
		{
			long RequestId; //@key
			WPS_DroneLocalizationData Data;
		};

		enum WPS_DroneLocalizationStatusEnum
		{
			Idle,  //Default and value at start
			Reporting
		};

		struct WPS_DroneLocalizationReportMessage
		{			
            WPS_DroneLocalizationStatusEnum DroneLocalizationStatus;
        	boolean docked;
		};
	}; //End Drone Localization Reporting
    
	module WPS_UTMVehicleLocalizationReporting {

		const long  MAX_LINKED_FRAMES = 10;
    	typedef sequence<WPS_TDPoint, MAX_LINKED_FRAMES> RelevantLinkedFrames_type;
        

		struct WPS_PositionOrientation
		{
			double x;
			double y;
			double z;
			double pitch;
			double roll;
			double yaw;

		};//@top-level false

		struct WPS_UTMVehicleLocalizationParameters
        {
            string<255> PathToFolder;
			string<255> LiveVideoURL;
        };//@top-level false

        enum WPS_UTMVehicleLocalizationOperation_type
		{
			ReportUTMCenterFrameLocalization,
			ReportVehicleOrientation,
			AbortAllReporting
		};

        struct WPS_UTMVehicleLocalizationData
		{
			WPS_UTMVehicleLocalizationOperation_type request;
			WPS_UTMVehicleLocalizationParameters parameters;
		};//@top-level false

		struct WPS_UTMVehicleLocalizationMessage
		{	
			long RequestId;//@key
			WPS_UTMVehicleLocalizationData Data;
		};

		enum WPS_UTMVehicleLocalizationStatusEnum
		{
			Idle,  //Default and value at start
			Reporting
		};

		struct WPS_UTMVehicleLocalizationReportData
		{
 			WPS_UTMVehicleLocalizationStatusEnum UTMVehicleLocalizationStatus;
        	boolean docked;
			WPS_TDPoint UTMCenterFrame;
            WPS_PositionOrientation VehiclePosOrient;
			RelevantLinkedFrames_type RelevantFrames;

		};//@top-level false			


		struct WPS_UTMVehicleLocalizationReportMessage
		{
			long RequestId;//@key
			WPS_UTMVehicleLocalizationReportData Data;         
		};
	}; //End UTM Vehicle Localization Reporting

	module WPS_ModelDifferences
    {

        struct WPS_ModelDifferencesParameters
        {
            string<255> PathToFolder_Old;
	        string<255> PathToFolder_New;
	        RegionOfInterest_type region_of_interest;
        };//@top-level false

        enum WPS_ModelDifferencesOperation_type
		{
			CheckModelDifferences,
			AbortCheckModel
		};

        struct WPS_ModelDifferencesData
		{
			WPS_ModelDifferencesOperation_type request;
			WPS_ModelDifferencesParameters parameters;
		};//@top-level false

		struct WPS_ModelDifferencesMessage
		{
			long RequestId;
			WPS_ModelDifferencesData Data;
		};

		enum WPS_ModelDifferencesStatusEnum
		{
			Idle,  //Default and value at start
			InProgess, 
            Aborted,
            Completed
		};

		struct WPS_ModelDifferencesReportMessage
		{
			long RequestId;//@key		
            WPS_ModelDifferencesStatusEnum ModelDifferencesStatus;
		};
        
    }; //End BuildModel
};
